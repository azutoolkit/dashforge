<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <meta name="description" content="Responsive Bootstrap 4 Dashboard Template">
    <meta name="author" content="ThemePixels">
    <link rel="shortcut icon" type="image/x-icon" href="/assets/img/favicon.png">

    <title>DashForge Responsive Bootstrap 4 Dashboard Template</title>

    <link href="/assets/lib/@fortawesome/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">
    <link href="/assets/lib/ionicons/css/ionicons.min.css" rel="stylesheet" type="text/css">
    <link href="/assets/css/dashforge.css" rel="stylesheet" type="text/css">
    {% block styles %}{% endblock  %}
    <link href="/assets/css/dashforge.css" rel="stylesheet" type="text/css">
  </head>

  <body class="mn-ht-100v d-flex flex-column">
    {% include 'partials/nav_bar.html' %}
    <div class="content content-fixed">
      <div class="container pd-x-0 pd-lg-x-10 pd-xl-x-0">
      {% block page_body %}{% endblock %}
      </div>
    </div>  
    {% include 'partials/footer.html' %}

    {% block script_footer %}
    <script src="/assets/lib/jquery/jquery.min.js" type="text/javascript"></script>
    <script src="/assets/lib/bootstrap/js/bootstrap.bundle.min.js" type="text/javascript"></script>
    <script src="/assets/lib/feather-icons/feather.min.js" type="text/javascript"></script>
    <script src="/assets/lib/perfect-scrollbar/perfect-scrollbar.min.js" type="text/javascript"></script>
    <script src="/assets/js/dashforge.js" type="text/javascript"></script>
    <script src="/assets/js/dashforge.sampledata.js" type="text/javascript"></script>
    <script src="/assets/js/dashboard-four.js" type="text/javascript"></script>
    {% endblock  %}

    <script type="module">
      import { h, Component, render, hydrate} from 'https://unpkg.com/preact?module';
      import htm from 'https://unpkg.com/htm?module';
      const html = htm.bind(h);

      var url = new URL(location.href);
      url.protocol = url.protocol.replace('http', 'ws');
      url.pathname = '/live-view';
      var live_view = new WebSocket(url);

      const sparkRenderEvent = new CustomEvent('spark-render');

      live_view.addEventListener('open', (event) => {
        // Hydrate client-side rendering
        document.querySelectorAll('[data-live-view]')
          .forEach((view)=> {
            var node = html(view.innerHTML)[0];
            hydrate(node, view.children[0]);

            live_view.send(JSON.stringify({
              subscribe: view.getAttribute('data-live-view'),
            }))
          });
      });

      live_view.addEventListener('message', (event) => {
        var html = htm.bind(h);
        var data = event.data;
        var { id, content } = JSON.parse(data);
        document.querySelectorAll(`[data-live-view="${id}"]`)
          .forEach((view) => {
            var div = window.$('<div>' + content + '</div>');
            view.children[0].innerHTML = div[0].innerHTML
            render(div[0], view, view.children[0]) ;
        
            document.dispatchEvent(sparkRenderEvent);
          });
      });

      live_view.addEventListener('close', (event) => {
        // Do we need to do anything here?
      });

      [
        'click',
        'change',
        'input',
      ].forEach((event_type) => {
        document.addEventListener(event_type, (event) => {
          var element = event.target;
          var event_name = element.getAttribute('live-' + event_type);

          if(typeof event_name === 'string') {
            var channel = event
              .target
              .closest('[data-live-view]')
              .getAttribute('data-live-view')

            var data = {};
            switch(element.type) {
              case "checkbox": data = { value: element.checked }; break;
              // Are there others?
              default: data = { value: element.getAttribute('live-value') || element.value }; break;
            }

            live_view.send(JSON.stringify({
              event: event_name,
              data: JSON.stringify(data),
              channel: channel,
            }));
          }
        });
      });
    </script>
  </body>
</html>
